/*	XOP-specific resources for TODO on Windows

	This file is compiled by the resource compiler and creates XOP-specific
	resources that IGOR looks for in an XOP module.
*/

#include "C:\Documents and Settings\brt127\My Documents\gitRepo\Coding\XOP Toolkit 5\IgorXOPs5\XOPSupport\XOPResources.h"			// Defines XOP-specific symbols.

1100 STR#					// Custom error messages
BEGIN
	"MatrixFileReader requires Igor 6.0 or later.\0",			
	"Out of memory. Bad luck...\0",
	// You can add error messages here.
	
	0,								// NOTE: 0 required to terminate the resource.
END

/* no menu item */

1100 XOPI							// XOPI - Describes general XOP properties to IGOR. 
BEGIN
	XOP_VERSION,					// Version number of host XOP system.
	DEV_SYS_CODE,					// Code for development system used to make XOP.
	0,								// Obsolete - set to zero.
	0,								// Obsolete - set to zero.
	XOP_TOOLKIT_VERSION				// XOP Toolkit version.
END


// autogenerated by create-igor-xop-files.pl from api-layout.h
1100 XOPF							// Describes functions added by XOP to IGOR.
BEGIN
	// variable checkForNewBricklets(variable *startBrickletID,variable *endBrickletID,variable rememberCalls)
	"checkForNewBricklets\0",
	F_UTIL | F_EXTERNAL,			// Function category,
	NT_FP64,				// Return value type.
		FV_REF_TYPE | NT_FP64,			// parameter 1
		FV_REF_TYPE | NT_FP64,			// parameter 2
		NT_FP64,			// parameter 3
	0,

	// variable closeResultFile()
	"closeResultFile\0",
	F_UTIL | F_EXTERNAL,			// Function category,
	NT_FP64,				// Return value type.
	0,

	// variable getAllBrickletData(string baseName, variable separateFolderForEachBricklet)
	"getAllBrickletData\0",
	F_UTIL | F_EXTERNAL,			// Function category,
	NT_FP64,				// Return value type.
		HSTRING_TYPE,			// parameter 1
		NT_FP64,			// parameter 2
	0,

	// variable getAllBrickletMetaData(string baseName, variable separateFolderForEachBricklet)
	"getAllBrickletMetaData\0",
	F_UTIL | F_EXTERNAL,			// Function category,
	NT_FP64,				// Return value type.
		HSTRING_TYPE,			// parameter 1
		NT_FP64,			// parameter 2
	0,

	// variable getBrickletData(string baseName, variable separateFolderForEachBricklet, variable brickletID)
	"getBrickletData\0",
	F_UTIL | F_EXTERNAL,			// Function category,
	NT_FP64,				// Return value type.
		HSTRING_TYPE,			// parameter 1
		NT_FP64,			// parameter 2
		NT_FP64,			// parameter 3
	0,

	// variable getBrickletMetaData(string baseName, variable brickletID)
	"getBrickletMetaData\0",
	F_UTIL | F_EXTERNAL,			// Function category,
	NT_FP64,				// Return value type.
		HSTRING_TYPE,			// parameter 1
		NT_FP64,			// parameter 2
	0,

	// variable getBrickletRawData(string baseName, variable brickletID)
	"getBrickletRawData\0",
	F_UTIL | F_EXTERNAL,			// Function category,
	NT_FP64,				// Return value type.
		HSTRING_TYPE,			// parameter 1
		NT_FP64,			// parameter 2
	0,

	// string getBugReportTemplate();
	"getBugReportTemplate\0",
	F_UTIL | F_EXTERNAL,			// Function category,
	HSTRING_TYPE,				// Return value type.
	0,

	// string getErrorMessage(variable errorCode)
	"getErrorMessage\0",
	F_UTIL | F_EXTERNAL,			// Function category,
	HSTRING_TYPE,				// Return value type.
		NT_FP64,			// parameter 1
	0,

	// variable getNumberOfBricklets(variable *totalNumberOfBricklets)
	"getNumberOfBricklets\0",
	F_UTIL | F_EXTERNAL,			// Function category,
	NT_FP64,				// Return value type.
		FV_REF_TYPE | NT_FP64,			// parameter 1
	0,

	// variable getRangeBrickletData(string baseName, variable separateFolderForEachBricklet, variable startBrickletID, variable endBrickletID)
	"getRangeBrickletData\0",
	F_UTIL | F_EXTERNAL,			// Function category,
	NT_FP64,				// Return value type.
		HSTRING_TYPE,			// parameter 1
		NT_FP64,			// parameter 2
		NT_FP64,			// parameter 3
		NT_FP64,			// parameter 4
	0,

	// variable getRangeBrickletMetaData(string baseName,variable separateFolderForEachBricklet, variable startBrickletID, variable endBrickletID)
	"getRangeBrickletMetaData\0",
	F_UTIL | F_EXTERNAL,			// Function category,
	NT_FP64,				// Return value type.
		HSTRING_TYPE,			// parameter 1
		NT_FP64,			// parameter 2
		NT_FP64,			// parameter 3
		NT_FP64,			// parameter 4
	0,

	// variable getResultFileMetaData(string waveName)
	"getResultFileMetaData\0",
	F_UTIL | F_EXTERNAL,			// Function category,
	NT_FP64,				// Return value type.
		HSTRING_TYPE,			// parameter 1
	0,

	// variable getResultFileName(string *filename)
	"getResultFileName\0",
	F_UTIL | F_EXTERNAL,			// Function category,
	NT_FP64,				// Return value type.
		FV_REF_TYPE | HSTRING_TYPE,			// parameter 1
	0,

	// variable getResultFilePath(string *absoluteFilePath)
	"getResultFilePath\0",
	F_UTIL | F_EXTERNAL,			// Function category,
	NT_FP64,				// Return value type.
		FV_REF_TYPE | HSTRING_TYPE,			// parameter 1
	0,

	// variable getVernissageVersion(string *vernissageVersion)
	"getVernissageVersion\0",
	F_UTIL | F_EXTERNAL,			// Function category,
	NT_FP64,				// Return value type.
		FV_REF_TYPE | HSTRING_TYPE,			// parameter 1
	0,

	// variable getXOPVersion(string *xopVersion)
	"getXOPVersion\0",
	F_UTIL | F_EXTERNAL,			// Function category,
	NT_FP64,				// Return value type.
		FV_REF_TYPE | HSTRING_TYPE,			// parameter 1
	0,

	// variable openResultFile(string absoluteFilePath, string fileName)
	"openResultFile\0",
	F_UTIL | F_EXTERNAL,			// Function category,
	NT_FP64,				// Return value type.
		HSTRING_TYPE,			// parameter 1
		HSTRING_TYPE,			// parameter 2
	0,


	0,								// NOTE: 0 required to terminate the resource.
END

